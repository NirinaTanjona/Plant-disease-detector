{"version":3,"sources":["components/navbar.js","components/Predict.js","components/utils.js","components/predResult.js","components/api.js","components/ImagePreview.js","components/uploadImage.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Navbar","className","variant","Container","fluid","Collapse","Text","href","style","fontSize","this","props","title","React","Component","Predict","removeUnderscore","disease","replace","now","confidence","ProgressBar","label","compareConfidence","predict1","predict2","PredictionResult","Col","md","prediction","filter","predict","sort","map","index","fetchPredict","data","a","fetch","mode","method","body","response","json","result","ImagePreview","imagePreviewUrl","imagePreview","src","alt","UploadImage","_handleImageChange","e","preventDefault","reader","FileReader","file","target","files","onloadend","setState","selectedFile","readAsDataURL","_handleUploadImage","state","FormData","append","name","getPredict","isLoading","onSubmit","Card","Body","type","id","class","onChange","for","color","Button","onClick","Spinner","animation","size","App","updatePredict","d-flex","Row","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd97affe.chunk.js","sourcesContent":["import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Container from 'react-bootstrap/Container'\nimport '../App.css' \n\n\nexport default class Header extends React.Component {\n  render() {\n    return (\n      <Navbar  className=\"header\"  variant=\"dark\">\n        <Container fluid>\n          <Navbar.Collapse className=\"justify-content-center\">\n            <Navbar.Text href=\"#\">\n              <strong style={{ fontSize: '25px' }}>{this.props.title}</strong>\n            </Navbar.Text>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    )\n  }\n}\n","import React from 'react'\nimport ProgressBar from 'react-bootstrap/ProgressBar'\n\nclass Predict extends React.Component {\n  constructor(props) {\n    super(props)\n    this.now = this.props.confidence * 100\n  }\n\n  removeUnderscore = () => {\n    const x = this.props.disease.replace(/___/g, \"~ \")\n    return x.replace(/_/g, \" \")\n  }\n\n\n  render() {\n    return (\n      <div>\n        <h3 className=\"disease-name\">{this.removeUnderscore()}</h3>\n        <ProgressBar now={this.now} label={`${this.now}%`} /> \n      </div>\n    )\n  }\n}\n\nexport default Predict\n","export const compareConfidence = (predict1, predict2) => predict1.confidence > predict2.confidence ? -1 : 1\n\n\n","import React from 'react'\nimport Predict from './Predict'\nimport { compareConfidence } from './utils'\nimport '../App.css'\nimport Col from 'react-bootstrap/Col'\n\n\nexport default class PredictionResult extends React.Component {\n  render() {\n    return (\n      <Col md className=\"mt-3 mb-5 prediction-result border-left\">\n        <h1 className=\"prediction-result-title\">Prediction  \n          <span className=\"prediction-result-blue-title\"> Result</span>\n        </h1>\n        <div>\n          {this.props.prediction\n            .filter(predict => (predict.confidence > 0.10))\n            .sort(compareConfidence)\n            .map(predict => (\n              <Predict key={predict.index} {...predict} />\n            ))}\n        </div>\n      </Col>\n    )\n  }\n}\n","export const fetchPredict = async (data) => {\n    const response = await fetch('https://plant-disease-detector01.herokuapp.com/predict', {\n        mode: 'cors',\n        method: 'POST',\n        body: data\n    })\n    const result = await response.json()\n    return result\n}\n","import React from 'react';\nimport './../App.css'\n\n\nclass ImagePreview extends React.Component {\n\n    render() {\n        let imagePreviewUrl = this.props.imagePreview\n        return (\n          <div className=\"mt-3 mb-3 imagePreview-container\">\n            { imagePreviewUrl && (\n              <img className=\"image-uploaded\" src={imagePreviewUrl} alt=\"\" />\n              )\n            }\n          </div>\n        )\n    }\n}\n\nexport default ImagePreview\n","import React from 'react'\nimport { fetchPredict } from './api'\nimport Button from 'react-bootstrap/Button'\nimport ImagePreview from './ImagePreview'\nimport Col from 'react-bootstrap/Col'\nimport Card from 'react-bootstrap/Card'\nimport Container from 'react-bootstrap/Container'\nimport { CloudUploadOutline } from 'react-ionicons'\nimport Spinner from 'react-bootstrap/Spinner'\n\n\nexport default class UploadImage extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      selectedFile: '',\n      imagePreview: '',\n      isLoading: false,\n    }\n  }\n\n  _handleImageChange = (e) => {\n    e.preventDefault()\n\n    let reader = new FileReader();\n    let file = e.target.files[0];\n\n    reader.onloadend = () => {\n      this.setState({\n        selectedFile: file,\n        imagePreviewUrl: reader.result\n      });\n    }\n\n    reader.readAsDataURL(file)\n  }\n\n  _handleUploadImage = (e) => {\n    e.preventDefault()\n    if (!this.state.selectedFile) return \n    const data = new FormData()\n    data.append('file', this.state.selectedFile)\n    data.append('filename', this.state.selectedFile.name)\n\n    this.getPredict(data)\n    this.setState({ selectedFile: '' })\n  }\n\n  getPredict = async (data) => {\n    this.setState({ isLoading: true })\n    const result = await fetchPredict(data)\n    this.props.onSubmit([...result])\n    this.setState({ isLoading: false })\n  }\n\n\n  render() {\n    return (\n      <Col md>\n        <Container fluid className=\"d-flex align-items-center text-center\"> \n          <Card className=\"m-3 card-container\">\n            <Card.Header><h1>Upload Plant Image</h1></Card.Header>\n              <Card.Body className=\"card-container\">\n                <form>\n                  <input type=\"file\" name=\"file\" id=\"file\" class=\"inputfile\"  onChange={this._handleImageChange} />\n                    <label for=\"file\">\n                      <CloudUploadOutline \n                        className=\"uploadIcon\"\n                        color={'rgba(26,26,26,.75'}\n                      />\n                      choose file\n                    </label>\n                </form>\n                <ImagePreview className=\"test\" imagePreview={this.state.imagePreviewUrl} />\n                <Button \n                  variant=\"primary\" \n                  onClick={this._handleUploadImage}>\n                  {!this.state.isLoading ? <span>detect disease</span>: <span><Spinner className=\"mr-3\" animation=\"grow\" size=\"sm\" />  searching...</span>} \n                </Button>\n              </Card.Body>\n          </Card>\n        </Container>\n      </Col>\n    )\n  }\n}\n","import React from 'react'\nimport './App.css'\nimport Header from './components/navbar'\nimport PredictionResult from './components/predResult' \nimport UploadImage from './components/uploadImage'\nimport { Container, Row } from 'react-bootstrap'\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      prediction: [],\n    }\n  }\n\n  updatePredict = prediction => {\n    this.setState({prediction: [...prediction]})\n  }\n\n\n  render() {\n    return (\n      <div className=\"body d-flex flex-column\"> \n        <Header title=\"Plant disease detection\" />\n        <Container className=\"main-container\" fluid d-flex>\n          <Row className=\"main-row\"> \n            <UploadImage onSubmit={this.updatePredict}/>\n            <PredictionResult prediction={this.state.prediction}/>\n          </Row>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Importing bootstrap css\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}